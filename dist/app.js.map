{"version":3,"sources":["../app.js"],"names":["jwt","require","jwksRsa","app","__dirname","connectToDatabase","options","server","socketOptions","keepAlive","connect","process","env","MONGODB_URI","connection","on","console","log","err","checkJwt","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","audience","issuer","algorithms","use","json","urlencoded","extended","req","res","next","Error","status","get","message","error","module","exports"],"mappings":";;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;;;AAHA,IAAMA,MAAMC,QAAQ,aAAR,CAAZ,C,CATA;;;;AAUA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;;AAIA,IAAME,MAAM,wBAAZ;;AAEA,2BAAIC,YAAY,OAAhB;;AAEA;;;;AAIA,IAAMC,oBAAoB,SAApBA,iBAAoB,GAAY;AAClC,QAAMC,UAAU;AACZ;AACA;AACAC,gBAAQ,EAACC,eAAe,EAACC,WAAW,CAAZ,EAAhB;AAHI,KAAhB;AAKA,uBAASC,OAAT,CAAiBC,QAAQC,GAAR,CAAYC,WAA7B,EAA0CP,OAA1C;AACH,CAPD;AAQAD;;AAEA;AACA,mBAASS,UAAT,CAAoBC,EAApB,CAAuB,WAAvB,EAAoC;AAAA,WAChCC,QAAQC,GAAR,CAAY,yCAAyCN,QAAQC,GAAR,CAAYC,WAAjE,CADgC;AAAA,CAApC;;AAIA;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAACG,GAAD,EAAS;AACrCF,YAAQC,GAAR,CAAY,wCAAwCC,GAApD;AACH,CAFD;;AAIA;AACA,mBAASJ,UAAT,CAAoBC,EAApB,CAAuB,cAAvB,EAAuC,YAAM;AACzCC,YAAQC,GAAR,CAAY,0CAAZ;AACH,CAFD;;AAIA;;;;AAIA,IAAME,WAAWnB,IAAI;AACjBoB,YAAQlB,QAAQmB,gBAAR,CAAyB;AAC7BC,eAAO,IADsB;AAE7BC,mBAAW,IAFkB;AAG7BC,+BAAuB,CAHM;AAI7BC;AAJ6B,KAAzB,CADS;;AAQjB;AACAC,cAAU,8BATO;AAUjBC,4CAViB;AAWjBC,gBAAY,CAAC,OAAD;AAXK,CAAJ,CAAjB;;AAcA;;;AAGA;;;AAGAzB,IAAI0B,GAAJ,CAAQ,4BAAQ,aAAR,CAAR;AACA1B,IAAI0B,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACA3B,IAAI0B,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;;AAEA;;;;AAIA7B,IAAI0B,GAAJ,CAAQ,GAAR;;AAEA;;;;AAIA;AACA1B,IAAI0B,GAAJ,CAAQ,UAAUI,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC9B,QAAIjB,MAAM,IAAIkB,KAAJ,CAAU,WAAV,CAAV;AACAlB,QAAImB,MAAJ,GAAa,GAAb;AACAF,SAAKjB,GAAL;AACH,CAJD;;AAMA;AACA,IAAIf,IAAImC,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AAClCnC,QAAI0B,GAAJ,CAAQ,UAACX,GAAD,EAAMe,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BD,YAAIG,MAAJ,CAAWnB,IAAImB,MAAJ,IAAc,GAAzB;AACAH,YAAIJ,IAAJ,CAAS;AACLS,qBAASrB,IAAIqB,OADR;AAELC,mBAAOtB;AAFF,SAAT;AAIH,KAND;AAOH;;AAED;AACAf,IAAI0B,GAAJ,CAAQ,UAACX,GAAD,EAAMe,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BD,QAAIG,MAAJ,CAAWnB,IAAImB,MAAJ,IAAc,GAAzB;AACAH,QAAIJ,IAAJ,CAAS;AACLS,iBAASrB,IAAIqB,OADR;AAELC,eAAO;AAFF,KAAT;AAIH,CAND;;AAQAC,OAAOC,OAAP,GAAiBvC,GAAjB","file":"app.js","sourcesContent":["/**\n * Module dependencies\n */\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport bodyParser from 'body-parser';\nimport mongoose from 'mongoose';\nimport env from 'node-env-file';\nconst jwt = require('express-jwt');\nconst jwksRsa = require('jwks-rsa');\n\nimport routes from './routes/index'\n\nconst app = express();\n\nenv(__dirname + '/.env');\n\n/**\n * Connect to MongoDB\n */\n\nconst connectToDatabase = function () {\n    const options = {\n        // user: process.env.MONGODB_USERNAME,\n        // pass: process.env.MONGODB_PASSWORD,\n        server: {socketOptions: {keepAlive: 1}}\n    };\n    mongoose.connect(process.env.MONGODB_URI, options);\n};\nconnectToDatabase();\n\n// When successfully connected\nmongoose.connection.on('connected', () =>\n    console.log('Mongoose default connection open to ' + process.env.MONGODB_URI)\n);\n\n// If the connection throws an error\nmongoose.connection.on('error', (err) => {\n    console.log('Mongoose default connection error: ' + err);\n});\n\n// When the connection is disconnected\nmongoose.connection.on('disconnected', () => {\n    console.log('Mongoose default connection disconnected');\n});\n\n/**\n * Auth0 Security Configuration\n */\n\nconst checkJwt = jwt({\n    secret: jwksRsa.expressJwtSecret({\n        cache: true,\n        rateLimit: true,\n        jwksRequestsPerMinute: 5,\n        jwksUri: `https://wolf-beacon.auth0.com/.well-known/jwks.json`\n    }),\n\n    // Validate the audience and the issuer.\n    audience: '{process.env.AUTH0_AUDIENCE}',\n    issuer: `https://wolf-beacon.auth0.com/`,\n    algorithms: ['RS256']\n});\n\n// app.use(checkJwt);\n\n\n/**\n * Add Other Configuration\n */\napp.use(favicon('favicon.ico'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n\n/**\n * Add Routes\n */\n\napp.use('/', routes);\n\n/**\n * Error Handlers\n */\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// development error handler print stacktrace\nif (app.get('env') === 'development') {\n    app.use((err, req, res, next) => {\n        res.status(err.status || 500);\n        res.json({\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n// production error no stacktraces leaked to user\napp.use((err, req, res, next) => {\n    res.status(err.status || 500);\n    res.json({\n        message: err.message,\n        error: {}\n    });\n});\n\nmodule.exports = app;\n"]}